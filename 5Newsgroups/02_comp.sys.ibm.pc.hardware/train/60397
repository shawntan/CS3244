from: eyal@fir.canberra.edu.au (eyal lebedinski)
subject: re: int15h for joystick is slow....
organ: info sci & eng, univers of canberra, australia
line: 89

in <1ql6i3inn8uh@no-name.nerdc.ufl.edu> lioness@oak.circa.ufl.edu write:

>i'm us int15h to read my joystick, and it is hideous slow.  someth
>like 90% of my cpu time is be spent read the joystick, and thi
>is in a program that doe noth but printf() and joyread().

if you onli do read/print then there is no reason for the joystick stuff
not to take 90% of the time even if it is effici.

>the problem is that a lot of program trap int15h ( like smartdrv ) and
>so it is a slow as hell interfac.  can i read the joystick port in
>a reason safe fashion via poll?  and that isn't platform or
>clockspe specif?

the truth is that int 15h joystick read is slow. i read it directli
from the hardwar port. note that do so expos you to intermitt
disturb from interrupt, so you mai want to read (sai) twice in a
row and keep the lower result. don't just turn interrupt off, it mai
prove detriment to the health of ani high speed comm and other
devic.

here is an exampl of how to do thi:

/* ------------------------------ joi.c ------------------------------------- */

/* an exampl of how to read pc joystick port by poll the hardwar port
 * directli.
 * us inp()/outp() for byte port access.
 * will timeout when 'int count=0' count up to zero.
 * thi sampl read on port (a is present and b is in the comment).
 * you can read both at onc by merg the two, but it will time out
 * when either joystick is not connect.
 *
 * there is no need to optim thi routin sinc it run for as long as
 * the joystick circuitri need.
 *
 * written by eyal lebedinski (eyal@is.canberra.edu.au).
*/

#includ <stdio.h>
#includ <stdlib.h>
#includ <conio.h>

extern int readjoi (int *x, int *y, int *b1, int *b2);

#defin joyport	0x201

#defin	xjoi	0x01	/* for joystick b us 0x04 */
#defin	yjoi	0x02	/* for joystick b us 0x08 */
#defin xymask	(xjoi|yjoi)
#defin	but1	0x10	/* for joystick b us 0x40 */
#defin	but2	0x20	/* for joystick b us 0x80 */

int					/* return 0 if ok */
readjoi (int *x, int *y, int *b1, int *b2)
{
	regist int	count;
	regist char	temp, joi;

	temp = (char)xymask;
	count = 0;
	outp (joyport, 0);		/* set trigger */
	do {
		temp ^= (joi = (char)inp (joyport));
		if (temp & xjoi)
			*x = count;
		if (temp & yjoi)
			*y = count;
	} while (++count && ((temp = joi) & xymask));
	*b1 = !(joi & but1);
	*b2 = !(joi & but2);

	return (!count);
}

/* thi main() is for demonstr.
*/

int
main ()
{
	int	rc, x, y, b1, b2;

	printf ("hit ani kei to exit\n");
	while (!kbhit ()) {
		rc = readjoi (&x, &y, &b1, &b2);
		printf ("\r%d %3d %3d %d %d", rc, x, y, b1, b2);
	}
}
